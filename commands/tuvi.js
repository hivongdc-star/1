const axios = require("axios");
const { EmbedBuilder } = require("discord.js");

// ===== Helpers =====
function norm(s = "") {
  return s.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "").replace(/[^a-z0-9]+/g, "").trim();
}

const SIGN_SYNONYMS = {
  aries: ["aries", "bach duong", "bd"],
  taurus: ["taurus", "kim nguu", "kim ngu", "kn"],
  gemini: ["gemini", "song tu", "st"],
  cancer: ["cancer", "cu giai", "cg"],
  leo: ["leo", "su tu", "sutu"],
  virgo: ["virgo", "xu nu", "xn"],
  libra: ["libra", "thien binh", "tb"],
  scorpio: ["scorpio", "bo cap", "bocap", "thien yet", "thien y et"],
  sagittarius: ["sagittarius", "nhan ma", "nm"],
  capricorn: ["capricorn", "ma ket", "mk"],
  aquarius: ["aquarius", "bao binh", "bb"],
  pisces: ["pisces", "song ngu", "sn"],
};

const SIGN_MAP = (() => {
  const m = {};
  for (const [canon, arr] of Object.entries(SIGN_SYNONYMS)) {
    for (const s of arr) m[norm(s)] = canon;
  }
  return m;
})();

const SIGN_VI_NAME = {
  aries: "B·∫°ch D∆∞∆°ng",
  taurus: "Kim Ng∆∞u",
  gemini: "Song T·ª≠",
  cancer: "C·ª± Gi·∫£i",
  leo: "S∆∞ T·ª≠",
  virgo: "X·ª≠ N·ªØ",
  libra: "Thi√™n B√¨nh",
  scorpio: "B·ªç C·∫°p",
  sagittarius: "Nh√¢n M√£",
  capricorn: "Ma K·∫øt",
  aquarius: "B·∫£o B√¨nh",
  pisces: "Song Ng∆∞",
};

const COLOR_VI = {
  red: "ƒê·ªè", blue: "Xanh lam", green: "Xanh l·ª•c", yellow: "V√†ng", orange: "Cam",
  purple: "T√≠m", pink: "H·ªìng", black: "ƒêen", white: "Tr·∫Øng", gray: "X√°m",
  brown: "N√¢u", silver: "B·∫°c", gold: "V√†ng kim", navy: "Xanh h·∫£i qu√¢n",
  teal: "Xanh m√≤ng k√©t", maroon: "ƒê·ªè ƒë√¥", beige: "Be", cyan: "Xanh l∆°",
};

const MOOD_VI = {
  happy: "Vui v·∫ª", sad: "Bu·ªìn", calm: "B√¨nh tƒ©nh", energetic: "Tr√†n ƒë·∫ßy nƒÉng l∆∞·ª£ng",
  focused: "T·∫≠p trung", romantic: "L√£ng m·∫°n", thoughtful: "Suy t∆∞", optimistic: "L·∫°c quan",
  pessimistic: "Bi quan", lucky: "May m·∫Øn", creative: "S√°ng t·∫°o", relaxed: "Th∆∞ th√°i",
  adventurous: "∆Øa m·∫°o hi·ªÉm", emotional: "C·∫£m x√∫c", practical: "Th·ª±c t·∫ø",
};

const sleep = (ms) => new Promise((r) => setTimeout(r, ms));

// Try several public translators (no key). Return original text on failure.
async function translateVI(text) {
  const t = String(text || "").trim();
  if (!t) return t;

  // 1) Argos OpenTech (LibreTranslate instance)
  try {
    const { data } = await axios.post(
      "https://translate.argosopentech.com/translate",
      { q: t, source: "en", target: "vi", format: "text" },
      { timeout: 7000, headers: { "Content-Type": "application/json" } }
    );
    if (data?.translatedText) return data.translatedText;
  } catch (_) {}

  // 2) LibreTranslate.com (may throttle)
  try {
    const { data } = await axios.post(
      "https://libretranslate.com/translate",
      { q: t, source: "en", target: "vi", format: "text" },
      { timeout: 7000, headers: { "Content-Type": "application/json" } }
    );
    if (data?.translatedText) return data.translatedText;
  } catch (_) {}

  // 3) MyMemory
  try {
    const { data } = await axios.get("https://api.mymemory.translated.net/get", {
      params: { q: t.slice(0, 450), langpair: "en|vi" },
      timeout: 7000,
    });
    const out = data?.responseData?.translatedText;
    if (out) return out;
  } catch (_) {}

  return t; // fallback: original
}

function viColor(s) {
  const n = norm(String(s || ""));
  return COLOR_VI[n] || s;
}

function viMood(s) {
  const n = norm(String(s || ""));
  return MOOD_VI[n] || s;
}

function viSignName(s) {
  const n = norm(String(s || ""));
  return SIGN_VI_NAME[n] || s;
}

// Primary: Ohmanda (free, no key)
async function fetchOhmanda(sign) {
  const url = `https://ohmanda.com/api/horoscope/${encodeURIComponent(sign)}`;
  const { data } = await axios.get(url, { timeout: 7000 });
  if (!data?.horoscope) throw new Error("ohmanda: empty data");
  return {
    src: "Ohmanda",
    current_date: data.date || "",
    description: data.horoscope || "",
  };
}

// Fallback 1: Vercel wrapper (free, no key)
async function fetchVercel(sign) {
  const url = "https://horoscope-app-api.vercel.app/api/v1/get-horoscope/daily";
  const { data } = await axios.get(url, { params: { sign, day: "today" }, timeout: 7000 });
  const d = data?.data;
  if (!d?.horoscope_data) throw new Error("vercel: empty data");
  return {
    src: "Horoscope Fallback",
    current_date: d.date || "",
    description: d.horoscope_data || "",
  };
}

// Aztro for metadata enrichment (POST, no key) ‚Äî retry x2
async function fetchAztro(sign) {
  const url = `https://aztro.sameerkumar.website/?sign=${encodeURIComponent(sign)}&day=today`;
  const headers = { "Content-Type": "application/x-www-form-urlencoded", "User-Agent": "cultivation-bot/1.5.6" };
  let last;
  for (let i = 0; i < 2; i++) {
    try {
      const { data } = await axios.post(url, "", { headers, timeout: 7000 });
      if (!data?.description) throw new Error("aztro: empty data");
      return { src: "Aztro", ...data };
    } catch (e) {
      last = e;
      const code = e?.response?.status;
      if (code && code < 500) break;
      await sleep(800 * (i + 1));
    }
  }
  throw last || new Error("aztro failed");
}

// Merge fields (use base, fill missing from enrich)
function enrich(base, extra) {
  const fields = ["compatibility", "mood", "color", "lucky_number", "lucky_time", "date_range", "current_date"];
  const out = { ...base };
  for (const k of fields) {
    if (!out[k] && extra[k]) out[k] = extra[k];
  }
  out.src = base.src === "Aztro" ? "Aztro" : `${base.src} + Aztro`;
  return out;
}

module.exports = {
  name: "tuvi",
  description: "Xem t·ª≠ vi H√îM NAY theo 12 cung ho√†ng ƒë·∫°o (VI ho√° n·ªôi dung)",
  aliases: ["tv", "horoscope", "zodiac"],
  usage: "-tuvi <cung>\nVD: -tuvi kim nguu | -tuvi bo cap",
  run: async (client, msg, args) => {
    try {
      if (!args || args.length === 0) {
        return msg.reply(
          "üìå C√°ch d√πng: `-tuvi <cung>`\n" +
          "V√≠ d·ª•: `-tuvi kim nguu`, `-tuvi bo cap`.\n" +
          "C√°c cung: B·∫°ch D∆∞∆°ng, Kim Ng∆∞u, Song T·ª≠, C·ª± Gi·∫£i, S∆∞ T·ª≠, X·ª≠ N·ªØ, Thi√™n B√¨nh, B·ªç C·∫°p, Nh√¢n M√£, Ma K·∫øt, B·∫£o B√¨nh, Song Ng∆∞."
        );
      }
      const signCanon = SIGN_MAP[norm(args.join(" "))];
      if (!signCanon) return msg.reply("‚ùå Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c **cung ho√†ng ƒë·∫°o**. Th·ª≠ l·∫°i nh√©!");

      let result = null;
      // 1) Th·ª≠ Ohmanda; n·∫øu l·ªói -> Vercel; n·∫øu v·∫´n l·ªói -> Aztro (full)
      try {
        result = await fetchOhmanda(signCanon);
      } catch (e1) {
        try {
          result = await fetchVercel(signCanon);
        } catch (e2) {
          result = await fetchAztro(signCanon); // ƒë√£ c√≥ ƒë·ªß metadata
        }
      }

      // 2) N·∫øu ngu·ªìn kh√¥ng c√≥ metadata -> enrich b·∫±ng Aztro (best-effort)
      if (result.src !== "Aztro") {
        try {
          const az = await fetchAztro(signCanon);
          result = enrich(result, az);
        } catch (e) {
          // im l·∫∑ng n·∫øu enrich th·∫•t b·∫°i
        }
      }

      // 3) Vi·ªát ho√° n·ªôi dung m√¥ t·∫£ v√† m·ªôt s·ªë tr∆∞·ªùng
      if (result.description) result.description = await translateVI(result.description);
      if (result.mood) result.mood = viMood(result.mood);
      if (result.color) result.color = viColor(result.color);
      if (result.compatibility) {
        // Th·ª≠ map sang t√™n cung TV; n·∫øu kh√¥ng map ƒë∆∞·ª£c th√¨ d·ªãch
        const mapped = viSignName(result.compatibility);
        result.compatibility = mapped === result.compatibility ? await translateVI(result.compatibility) : mapped;
      }

      // Build fields dynamically
      const fields = [];
      if (result.compatibility) fields.push({ name: "ü§ù H·ª£p c·∫°", value: String(result.compatibility), inline: true });
      if (result.mood)          fields.push({ name: "üòä T√¢m tr·∫°ng", value: String(result.mood), inline: true });
      if (result.color)         fields.push({ name: "üé® M√†u may m·∫Øn", value: String(result.color), inline: true });
      if (result.lucky_number)  fields.push({ name: "üî¢ S·ªë may m·∫Øn", value: String(result.lucky_number), inline: true });
      if (result.lucky_time)    fields.push({ name: "üïí Gi·ªù may m·∫Øn", value: String(result.lucky_time), inline: true });
      if (result.date_range)    fields.push({ name: "üìÖ Kho·∫£ng ng√†y", value: String(result.date_range), inline: true });

      const embed = new EmbedBuilder()
        .setColor("Blue")
        .setTitle(`üîÆ H√¥m nay ¬∑ ${SIGN_VI_NAME[signCanon]}${result.current_date ? ` (${result.current_date})` : ""}`)
        .setDescription(result.description || "Kh√¥ng c√≥ d·ªØ li·ªáu.")
        .setFooter({ text: `Ngu·ªìn: ${result.src} ¬∑ Ti·ªÖn T√¨nh` })
        .setTimestamp();

      if (fields.length) embed.addFields(fields);

      return msg.channel.send({ embeds: [embed] });
    } catch (err) {
      console.error("tuvi error:", err?.response?.status || err?.message || err);
      return msg.reply("‚ö†Ô∏è H·ªá th·ªëng t·ª≠ vi ƒëang b·∫≠n. Th·ª≠ l·∫°i sau m·ªôt l√°t nh√©!");
    }
  },
};
