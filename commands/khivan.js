const { EmbedBuilder } = require("discord.js");
const fs = require("fs");
const path = require("path");

// === Helpers: JST date + deterministic RNG ===
function getJSTDateKey() {
  const nowJST = new Date(new Date().toLocaleString("en-US", { timeZone: "Asia/Tokyo" }));
  const y = nowJST.getFullYear();
  const m = String(nowJST.getMonth() + 1).padStart(2, "0");
  const d = String(nowJST.getDate()).padStart(2, "0");
  return `${y}${m}${d}`; // YYYYMMDD
}
function hash32(str) {
  let h = 2166136261 >>> 0;
  for (let i = 0; i < str.length; i++) { h ^= str.charCodeAt(i); h = Math.imul(h, 16777619); }
  h ^= h >>> 13; h = Math.imul(h, 0x85ebca6b);
  h ^= h >>> 16; h = Math.imul(h, 0xc2b2ae35);
  return h >>> 0;
}
function createPRNG(seed) {
  let t = seed >>> 0;
  return function () {
    t += 0x6D2B79F5;
    let r = Math.imul(t ^ (t >>> 15), 1 | t);
    r ^= r + Math.imul(r ^ (r >>> 7), 61 | r);
    return ((r ^ (r >>> 14)) >>> 0) / 4294967296;
  };
}
function pick(rng, arr) { return arr[Math.floor(rng() * arr.length)]; }
function clamp(n, a, b) { return Math.min(b, Math.max(a, n)); }

// === Static pools ===
const NGU_HANH = ["Kim", "M·ªôc", "Th·ªßy", "H·ªèa", "Th·ªï"];
const HUONG = ["ƒê√¥ng", "T√¢y", "Nam", "B·∫Øc", "ƒê√¥ng Nam", "T√¢y Nam", "ƒê√¥ng B·∫Øc", "T√¢y B·∫Øc"];
const MAU = [
  { name: "ƒêen huy·ªÅn", hex: 0x111111 },
  { name: "Tr·∫Øng ng·ªçc", hex: 0xEEEEEE },
  { name: "Xanh l·ª•c", hex: 0x22AA66 },
  { name: "Xanh d∆∞∆°ng", hex: 0x2A6FE8 },
  { name: "ƒê·ªè son", hex: 0xE53935 },
  { name: "V√†ng kim", hex: 0xF6C343 },
  { name: "T√≠m m·ªông", hex: 0x8E44AD },
  { name: "N√¢u ƒë·∫•t", hex: 0x8D6E63 },
  { name: "X√°m b·∫°c", hex: 0x95A5A6 },
  { name: "Lam nh·∫°t", hex: 0x7FB3D5 }
];
const LOI_NHAN = [
  "Gi·ªØ t√¢m b·∫•t bi·∫øn gi·ªØa d√≤ng ƒë·ªùi v·∫°n bi·∫øn.",
  "Ti·∫øn m·ªôt, gi·ªØ hai, l√πi m·ªôt ‚Äî ƒë√∫ng th·ªùi th√¨ l√†m.",
  "Ho√†n th√†nh vi·ªác nh·ªè quan tr·ªçng ngay.",
  "H√≠t s√¢u, l√†m ch·∫≠m, ∆∞u ti√™n th·ª© t·ª±.",
  "Tr√°nh tranh bi·ªán v√¥ √≠ch; h√†nh ƒë·ªông n√≥i thay.",
  "ƒê·∫Øc th·ªùi ch·ªõ ki√™u, th·∫•t th·ªùi ch·ªõ n·∫£n.",
  "Gieo thi·ªán ni·ªám, g·∫∑t thi·ªán duy√™n.",
  "Tƒ©nh ƒë·ªÉ bi·∫øt, ƒë·ªông ƒë·ªÉ th√†nh.",
  "C√°t t·∫°i t√¢m, hung do v·ªçng.",
  "D·ªçn g·ªçn m·ªôt g√≥c ‚Äî th√¥ng m·ªôt vi·ªác."
];

// === B√ÅT QU√ÅI ===
const TRIGRAMS = [
  { code: 0, name: "Kh√¥n", symbol: "‚ò∑" },
  { code: 1, name: "C·∫•n", symbol: "‚ò∂" },
  { code: 2, name: "Kh·∫£m", symbol: "‚òµ" },
  { code: 3, name: "T·ªën", symbol: "‚ò¥" },
  { code: 4, name: "Ch·∫•n", symbol: "‚ò≥" },
  { code: 5, name: "Ly",   symbol: "‚ò≤" },
  { code: 6, name: "ƒêo√†i", symbol: "‚ò±" },
  { code: 7, name: "C√†n",  symbol: "‚ò∞" },
];
const codeToTri = (c) => TRIGRAMS.find(t => t.code === c);
const nameToTri = (n) => TRIGRAMS.find(t => t.name === n);
const TRI_PAIR = { "C√†n": "Kh√¥n", "Kh√¥n": "C√†n", "Kh·∫£m": "Ly", "Ly": "Kh·∫£m", "Ch·∫•n": "T·ªën", "T·ªën": "Ch·∫•n", "C·∫•n": "ƒêo√†i", "ƒêo√†i": "C·∫•n" };

function makeSixLines(rng) { return Array.from({ length: 6 }, () => (rng() < 0.5 ? 0 : 1)); }
function linesToTriCode(lines, startIdx) {
  return (lines[startIdx] ? 1 : 0)
       | (lines[startIdx + 1] ? 2 : 0)
       | (lines[startIdx + 2] ? 4 : 0);
}
function renderHex(lines) {
  const lineStr = (b) => (b ? "‚Äî‚Äî‚Äî" : "‚Äî ‚Äî");
  return [5,4,3,2,1,0].map(i => lineStr(lines[i])).join("\n");
}
function triLabel(code) { const t = codeToTri(code); return `${t.symbol} ${t.name}`; }
function makeCompatHexagrams(upperCode, lowerCode) {
  const up = codeToTri(upperCode), low = codeToTri(lowerCode);
  const upPair = nameToTri(TRI_PAIR[up.name]); const lowPair = nameToTri(TRI_PAIR[low.name]);
  return { upperCompat: { upper: upPair, lower: low }, lowerCompat: { upper: up, lower: lowPair }, doubleCompat: { upper: upPair, lower: lowPair } };
}

// === Load Iching data ===
let ICHING_CACHE = null;
function loadIChingVI() {
  if (ICHING_CACHE) return ICHING_CACHE;
  const p = path.join(__dirname, "../data/iching_vi.json");
  try { ICHING_CACHE = JSON.parse(fs.readFileSync(p, "utf8")); } catch { ICHING_CACHE = []; }
  return ICHING_CACHE;
}
function findHexRecord(upperCode, lowerCode) {
  const iching = loadIChingVI();
  const up = codeToTri(upperCode)?.name; const low = codeToTri(lowerCode)?.name;
  return iching.find(h => h.upper === up && h.lower === low) || null;
}

// === Tier 7 + score rendering ===
function tierFromScore7(score) {
  if (score >= 90) return { tier: "ƒê·∫°i C√°t", emoji: "‚ú®", note: "Th·ªùi c∆° ch√≠n, n√™n h√†nh ƒë·∫°i s·ª±.", color: 0xF6C343 };
  if (score >= 80) return { tier: "C√°t", emoji: "üåü", note: "Thu·∫≠n l·ª£i ch·ªß ƒë·∫°o, quy·∫øt nhanh vi·ªác ch√≠nh.", color: 0x2ECC71 };
  if (score >= 70) return { tier: "Ti·ªÉu C√°t", emoji: "üí´", note: "Kh√° t·ªët, ki√™n tr√¨ s·∫Ω n√™n.", color: 0x7FB3D5 };
  if (score >= 55) return { tier: "B√¨nh", emoji: "üå§Ô∏è", note: "·ªîn ƒë·ªãnh, lo ph·∫ßn n·ªÅn.", color: 0x95A5A6 };
  if (score >= 40) return { tier: "Ti·ªÉu Hung", emoji: "üå´Ô∏è", note: "C·∫©n th·∫≠n chi ti·∫øt, tr√°nh v·ªôi.", color: 0x8D6E63 };
  if (score >= 25) return { tier: "Hung", emoji: "‚ö†Ô∏è", note: "Gi·∫£m r·ªßi ro, tr√¨ ho√£n quy·∫øt ƒë·ªãnh l·ªõn.", color: 0xE67E22 };
  return { tier: "ƒê·∫°i Hung", emoji: "‚ò†Ô∏è", note: "Thu m√¨nh d∆∞·ª°ng s·ª©c, ch·ªù th·ªùi.", color: 0xE53935 };
}
const TIER7_CENTROIDS = { "ƒê·∫°i C√°t":95,"C√°t":85,"Ti·ªÉu C√°t":75,"B√¨nh":62,"Ti·ªÉu Hung":47,"Hung":32,"ƒê·∫°i Hung":15 };
function evaluateTierFromHex(hexRec, rng) {
  let baseTier = hexRec?.tier7;
  if (!baseTier && typeof hexRec?.scoreHint === "number") baseTier = tierFromScore7(hexRec.scoreHint).tier;
  if (!baseTier) baseTier = "B√¨nh";
  const centroid = TIER7_CENTROIDS[baseTier] ?? 62;
  const jitter = Math.floor((rng() - 0.5) * 12);
  const score = Math.max(0, Math.min(100, centroid + jitter));
  const t = tierFromScore7(score);
  return { score, ...t, baseTier };
}
function bar(score) { const filled = Math.round(score / 10); return "‚ñ∞".repeat(filled) + "‚ñ±".repeat(10 - filled); }

module.exports = {
  name: "khivan",
  description: "B√≥i kh√≠ v·∫≠n h√¥m nay (JST) d·ª±a theo Kinh D·ªãch ‚Äî 7 b·∫≠c: ƒê·∫°i C√°t ‚Üí ... ‚Üí ƒê·∫°i Hung.",
  aliases: ["kv", "kivan", "khi", "khi-van", "fortune", "luck"],
  usage: "-khivan [@ai ƒë√≥ (tu·ª≥ ch·ªçn)]",
  run: async (client, msg, args) => {
    const dateKey = getJSTDateKey();
    const target = msg.mentions?.users?.first?.() || msg.author;
    const rng = createPRNG(hash32(`${target.id}-${dateKey}`));

    // Ph·ª• tr·ª£
    const element = pick(rng, NGU_HANH);
    const color = pick(rng, MAU);
    const direction = pick(rng, HUONG);
    const luckyNumber = clamp(Math.floor(rng() * 90) + 10, 10, 99);
    const tip = pick(rng, LOI_NHAN);

    // Qu·∫ª
    const six = makeSixLines(rng);
    const lowerCode = linesToTriCode(six, 0);
    const upperCode = linesToTriCode(six, 3);
    const hexAscii = renderHex(six);

    const upLabel = triLabel(upperCode);
    const lowLabel = triLabel(lowerCode);
    const compat = makeCompatHexagrams(upperCode, lowerCode);

    const hexRec = findHexRecord(upperCode, lowerCode);
    const { score: adjScore, tier, emoji, note, color: tierColor } = evaluateTierFromHex(hexRec, rng);

    const embed = new EmbedBuilder()
      .setColor(tierColor || color.hex)
      .setTitle("üîÆ B√≥i Kh√≠ V·∫≠n H√¥m Nay")
      .setDescription([
        `${emoji} **${tier}** _(theo Kinh D·ªãch)_ ‚Äî ${note}`,
        `**${bar(adjScore)}**  \\`${adjScore}/100\\``,
        ``,
        `> K·∫øt qu·∫£ c·ªë ƒë·ªãnh trong ng√†y **${dateKey.slice(0,4)}-${dateKey.slice(4,6)}-${dateKey.slice(6)} (JST)** ƒë·ªëi v·ªõi **${target.username}**.`
      ].join("\n"));

    if (hexRec) {
      const titleLine = `**${hexRec.symbol} ${hexRec.vn}**` + (hexRec.han ? ` ‚Äî ${hexRec.han}` : "") + (hexRec.no ? ` (Qu·∫ª ${hexRec.no})` : "");
      const luckLines = [
        hexRec?.luck?.career ? `‚Ä¢ CV: ${hexRec.luck.career}` : null,
        hexRec?.luck?.wealth ? `‚Ä¢ T√†i: ${hexRec.luck.wealth}` : null,
        hexRec?.luck?.love   ? `‚Ä¢ T√¨nh: ${hexRec.luck.love}`   : null,
        hexRec?.luck?.health ? `‚Ä¢ SK: ${hexRec.luck.health}`   : null,
      ].filter(Boolean).join("\n") || "‚Äî";

      embed.addFields(
        { name: "B·∫£n qu·∫ª", value: ["```", `${hexAscii}`, "```", `**Th∆∞·ª£ng:** ${upLabel}`, `**H·∫°:** ${lowLabel}`, `${titleLine}`].join("\n") },
        { name: "L·ªùi qu·∫ª", value: (hexRec.judgment || "‚Äî").slice(0, 256), inline: false },
        { name: "T∆∞·ª£ng", value: (hexRec.image || "‚Äî").slice(0, 256), inline: false },
        { name: "N√™n", value: (hexRec.do || []).slice(0,3).map(i => `‚Ä¢ ${i}`).join("\n") || "‚Äî", inline: true },
        { name: "Tr√°nh", value: (hexRec.dont || []).slice(0,3).map(i => `‚Ä¢ ${i}`).join("\n") || "‚Äî", inline: true },
        { name: "G·ª£i √Ω 4 m·∫∑t", value: luckLines, inline: false },
      );
    }

    // Ph·ª• tr·ª£
    embed.addFields(
      { name: "H√†nh kh√≠", value: element, inline: true },
      { name: "M√†u c√°t t∆∞·ªùng", value: hexRec?.colorHint || color.name, inline: true },
      { name: "Con s·ªë may m·∫Øn", value: String(luckyNumber), inline: true },
      { name: "Ph∆∞∆°ng h∆∞·ªõng thu·∫≠n", value: hexRec?.directionHint || direction, inline: true },
      { name: "L·ªùi nh·∫Øn", value: tip, inline: false },
    );

    // Qu·∫ª h·ª£p
    const upperCompatLabel = `${triLabel(compat.upperCompat.upper.code)} tr√™n ${triLabel(compat.upperCompat.lower.code)}`;
    const lowerCompatLabel = `${triLabel(compat.lowerCompat.upper.code)} tr√™n ${triLabel(compat.lowerCompat.lower.code)}`;
    const doubleCompatLabel = `${triLabel(compat.doubleCompat.upper.code)} tr√™n ${triLabel(compat.doubleCompat.lower.code)}`;
    embed.addFields(
      { name: "Qu·∫ª h·ª£p (theo Th∆∞·ª£ng)", value: upperCompatLabel, inline: true },
      { name: "Qu·∫ª h·ª£p (theo H·∫°)", value: lowerCompatLabel, inline: true },
      { name: "Song h·ª£p", value: doubleCompatLabel, inline: true },
    );

    embed.setFooter({ text: "ƒê·ªïi ng√†y (JST) s·∫Ω ƒë·ªïi kh√≠ v·∫≠n. D√πng: -khivan [@user]" });
    return msg.reply({ embeds: [embed] });
  },
};
