const fetch = (...args) => import("node-fetch").then(({ default: fetch }) => fetch(...args));
const { EmbedBuilder } = require("discord.js");

// üí´ API key Gemini
const GEMINI_API_KEY = "AIzaSyCacDkHISpdCEhSaErVztXr82YdMeA4EZQ"; // Thay b·∫±ng key th·∫≠t c·ªßa b·∫°n
const GEMINI_MODEL = "gemini-2.0-flash";

module.exports = {
  name: "call",
  aliases: ["ti√´nt√¨nh", "tientinh", "ask"],
  description: "G·ªçi Ti·ªÖn T√¨nh ƒë·ªÉ tr√≤ chuy·ªán ho·∫∑c h·ªèi ƒë√°p.",

  async run(client, msg, args) {
    if (!args.length) {
      return msg.reply("üí≠ H√£y n√≥i g√¨ ƒë√≥ v·ªõi **Ti·ªÖn T√¨nh**, v√≠ d·ª•: `-call B·∫°n nghƒ© g√¨ v·ªÅ t√¨nh y√™u?`");
    }

    const question = args.join(" ");

    try {
      const thinking = await msg.channel.send("üå∏ **Ti·ªÖn T√¨nh** ƒëang l·∫Øng nghe...");

      const res = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-goog-api-key": GEMINI_API_KEY,
          },
          body: JSON.stringify({
            contents: [
              {
                parts: [{ text: question }],
              },
            ],
          }),
        }
      );

      const data = await res.json();
      console.log("Gemini raw:", JSON.stringify(data, null, 2));

      const answer =
        data?.candidates?.[0]?.content?.parts?.[0]?.text ||
        "‚ùå Ti·ªÖn T√¨nh im l·∫∑ng m·ªôt l√∫c l√¢u... (kh√¥ng c√≥ ph·∫£n h·ªìi h·ª£p l·ªá)";

      const embed = new EmbedBuilder()
        .setColor(0xffaacc)
        .setAuthor({
          name: "Ti·ªÖn T√¨nh ‚ú®",
          iconURL: "https://cdn-icons-png.flaticon.com/512/4712/4712027.png",
        })
        .addFields(
          { name: "üíå B·∫°n h·ªèi:", value: question.slice(0, 1024) },
          { name: "üå∑ Ti·ªÖn T√¨nh n√≥i:", value: answer.slice(0, 1024) }
        )
        .setFooter({
          text: "Tr√≤ chuy·ªán c√πng Ti·ªÖn T√¨nh ‚Ä¢ Gemini 2.0 Flash",
          iconURL: client.user.displayAvatarURL(),
        });

      await thinking.edit({ content: "", embeds: [embed] });
    } catch (err) {
      console.error("üíî Ti·ªÖn T√¨nh error:", err);
      msg.reply("‚ö†Ô∏è Ti·ªÖn T√¨nh g·∫∑p ch√∫t tr·ª•c tr·∫∑c, h√£y th·ª≠ l·∫°i sau nh√©...");
    }
  },
};
