const { ActionRowBuilder, StringSelectMenuBuilder, ComponentType } = require("discord.js");
const { getUser, saveUsers, loadUsers } = require("../utils/storage");
const { listItems } = require("../shop/shopUtils");

module.exports = {
  name: "use",
  aliases: ["dung"],
  run: async (client, msg) => {
    const user = getUser(msg.author.id);
    if (!user) return msg.reply("‚ùå B·∫°n ch∆∞a c√≥ nh√¢n v·∫≠t.");

    const catalog = listItems();
    const inv = user.inventory || {};

    // L·ªçc nh·ªØng item s·ªë l∆∞·ª£ng > 0 v√† c√≥ type "consumable" ho·∫∑c "relationship"
    const usableItems = Object.entries(inv).filter(([id, qty]) => {
      const item = catalog[id];
      return qty > 0 && item && (item.type === "consumable" || item.type === "relationship");
    });

    if (usableItems.length === 0) {
      return msg.reply("‚ùå B·∫°n kh√¥ng c√≥ v·∫≠t ph·∫©m n√†o c√≥ th·ªÉ s·ª≠ d·ª•ng.");
    }

    // T·∫°o select menu
    const options = usableItems.slice(0,25).map(([id, qty]) => {
      const item = catalog[id];
      return {
        label: `${item.emoji || "üì¶"} ${item.name} (x${qty})`,
        value: id,
        description: item.description ? item.description.slice(0, 90) : "Kh√¥ng c√≥ m√¥ t·∫£"
      };
    });

    const menu = new StringSelectMenuBuilder()
      .setCustomId(`use_${msg.author.id}`)
      .setPlaceholder("Ch·ªçn v·∫≠t ph·∫©m ƒë·ªÉ s·ª≠ d·ª•ng...")
      .addOptions(options);

    const row = new ActionRowBuilder().addComponents(menu);
    const sent = await msg.reply({ content: "üéí Ch·ªçn v·∫≠t ph·∫©m b·∫°n mu·ªën s·ª≠ d·ª•ng:", components: [row] });

    const collector = sent.createMessageComponentCollector({
      componentType: ComponentType.StringSelect,
      time: 30000
    });

    collector.on("collect", async (i) => {
      if (i.user.id !== msg.author.id) {
        return i.reply({ content: "‚ùå ƒê√¢y kh√¥ng ph·∫£i menu c·ªßa b·∫°n.", ephemeral: true });
      }

      const itemId = i.values[0];
      const item = catalog[itemId];
      if (!item) return i.reply({ content: "‚ùå V·∫≠t ph·∫©m kh√¥ng t·ªìn t·∫°i.", ephemeral: true });

      // Gi·∫£m s·ªë l∆∞·ª£ng trong inventory
      user.inventory[itemId] = (user.inventory[itemId] || 0) - 1;
      if (user.inventory[itemId] <= 0) delete user.inventory[itemId];

      // √Åp d·ª•ng hi·ªáu ·ª©ng
      let result = "";
      if (item.type === "consumable") {
        if (item.effect.hp) {
          user.hp = Math.min(user.maxHp, user.hp + item.effect.hp);
          result += `‚ù§Ô∏è H·ªìi ${item.effect.hp} HP. `;
        }
        if (item.effect.mp) {
          user.mp = Math.min(user.maxMp, user.mp + item.effect.mp);
          result += `üîÆ H·ªìi ${item.effect.mp} MP. `;
        }
      } else if (item.type === "relationship") {
        result = "üíç V·∫≠t ph·∫©m nh·∫´n s·∫Ω c·∫ßn l·ªánh ri√™ng ƒë·ªÉ k·∫øt h√¥n v·ªõi partner (d√πng `-shop @partner`).";
      }

      const users = loadUsers();
      users[msg.author.id] = user;
      saveUsers(users);

      i.update({
        content: `‚úÖ B·∫°n ƒë√£ s·ª≠ d·ª•ng **${item.emoji} ${item.name}**. ${result}`,
        components: []
      });
    });

    collector.on("end", () => {
      sent.edit({ components: [] }).catch(() => {});
    });
  },
};
