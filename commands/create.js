const {
  ActionRowBuilder,
  StringSelectMenuBuilder,
  EmbedBuilder,
} = require("discord.js");
const { createUser, loadUsers } = require("../utils/storage");
const races = require("../utils/races");
const elements = require("../utils/element");

module.exports = {
  name: "create",
  aliases: ["c"],
  run: async (client, msg) => {
    const users = loadUsers();
    if (users[msg.author.id]) {
      return msg.reply("‚ö†Ô∏è B·∫°n ƒë√£ c√≥ nh√¢n v·∫≠t r·ªìi! D√πng `-profile` ƒë·ªÉ xem.");
    }

    const raceMenu = new StringSelectMenuBuilder()
      .setCustomId("select_race")
      .setPlaceholder("üß¨ Ch·ªçn T·ªôc")
      .addOptions(
        Object.entries(races).map(([key, r]) => ({
          label: r.name.substring(0, 25),
          value: key,
          emoji: r.emoji,
        }))
      );

    const elementMenu = new StringSelectMenuBuilder()
      .setCustomId("select_element")
      .setPlaceholder("üåø Ch·ªçn Ng≈© h√†nh")
      .addOptions(
        Object.entries(elements.display).map(([key, raw]) => {
          const [emoji, name] = raw.split(" ");
          return {
            label: name.substring(0, 25),
            value: key,
            emoji: emoji,
          };
        })
      );

    const row1 = new ActionRowBuilder().addComponents(raceMenu);
    const row2 = new ActionRowBuilder().addComponents(elementMenu);

    const embed = new EmbedBuilder()
      .setTitle("‚ú® T·∫°o Nh√¢n V·∫≠t")
      .setDescription("Ch·ªçn **T·ªôc** v√† **Ng≈© h√†nh** ƒë·ªÉ b·∫Øt ƒë·∫ßu tu luy·ªán!")
      .setColor("Purple");

    const reply = await msg.reply({
      embeds: [embed],
      components: [row1, row2],
    });

    let selectedRace = null;
    let selectedElement = null;
    let created = false;
    const collector = reply.createMessageComponentCollector({ time: 60000 });

    collector.on("collect", async (interaction) => {
      if (interaction.user.id !== msg.author.id) {
        return interaction.reply({
          content: "‚ö†Ô∏è ƒê√¢y kh√¥ng ph·∫£i l·ª±a ch·ªçn c·ªßa b·∫°n!",
          ephemeral: true,
        });
      }

      if (interaction.customId === "select_race") {
        selectedRace = interaction.values[0];
        await interaction.reply({
          content: `üß¨ B·∫°n ƒë√£ ch·ªçn **${races[selectedRace].emoji} ${races[selectedRace].name}**`,
          ephemeral: true,
        });
      }

      if (interaction.customId === "select_element") {
        selectedElement = interaction.values[0];
        await interaction.reply({
          content: `üåø B·∫°n ƒë√£ ch·ªçn **${elements.display[selectedElement]}**`,
          ephemeral: true,
        });
      }

      if (selectedRace && selectedElement) {
        const newUser = createUser(msg.author.id, selectedRace, selectedElement);
        newUser.background = "default"; // g√°n m·∫∑c ƒë·ªãnh
        created = true;

        const confirm = new EmbedBuilder()
          .setTitle("‚úÖ Nh√¢n v·∫≠t ƒë√£ t·∫°o th√†nh c√¥ng!")
          .setColor("Green")
          .setDescription(
            `üß¨ **T·ªôc:** ${races[selectedRace].emoji} ${races[selectedRace].name}\n` +
              `üåø **Ng≈© h√†nh:** ${elements.display[selectedElement]}\n` +
              `‚öîÔ∏è **C·∫£nh gi·ªõi:** ${newUser.realm}\n\n` +
              `‚ù§Ô∏è M√°u: ${newUser.hp}/${newUser.maxHp}\n` +
              `üî∑ Mana: ${newUser.mp}/${newUser.maxMp}\n` +
              `üî• C√¥ng: ${newUser.atk} | üõ°Ô∏è Th·ªß: ${newUser.def} | ‚ö° T·ªëc: ${newUser.spd}\n` +
              `üí¢ N·ªô: ${newUser.fury} | üíé Linh Th·∫°ch: ${newUser.lt}`
          );

        await msg.channel.send({ embeds: [confirm] });
        collector.stop();
      }
    });

    collector.on("end", () => {
      if (!created) {
        msg.channel.send("‚è≥ B·∫°n ch∆∞a ho√†n t·∫•t ch·ªçn T·ªôc v√† Ng≈© h√†nh, h√£y th·ª≠ l·∫°i!");
      }
    });
  },
};
