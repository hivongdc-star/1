// commands/create.js
const {
  ActionRowBuilder,
  StringSelectMenuBuilder,
  EmbedBuilder,
} = require("discord.js");
const { loadUsers, saveUsers } = require("../utils/storage");
const elements = require("../utils/element");
const races = require("../utils/races");

module.exports = {
  name: "create",
  aliases: ["c"],
  run: async (client, msg) => {
    const users = loadUsers();
    if (users[msg.author.id]) {
      return msg.reply("‚ö†Ô∏è B·∫°n ƒë√£ c√≥ nh√¢n v·∫≠t r·ªìi! D√πng `-profile` ƒë·ªÉ xem.");
    }

    const raceMenu = new StringSelectMenuBuilder()
      .setCustomId("select_race")
      .setPlaceholder("üß¨ Ch·ªçn T·ªôc")
      .addOptions(
        Object.entries(races).map(([key, r]) => ({
          label: r.name,
          value: key,
          emoji: r.emoji,
        }))
      );

    const elementMenu = new StringSelectMenuBuilder()
      .setCustomId("select_element")
      .setPlaceholder("üåø Ch·ªçn Ng≈© h√†nh")
      .addOptions([
        { label: "Kim", value: "kim", emoji: "‚öîÔ∏è" },
        { label: "M·ªôc", value: "moc", emoji: "üåø" },
        { label: "Th·ªßy", value: "thuy", emoji: "üíß" },
        { label: "H·ªèa", value: "hoa", emoji: "üî•" },
        { label: "Th·ªï", value: "tho", emoji: "‚õ∞Ô∏è" },
      ]);

    const row1 = new ActionRowBuilder().addComponents(raceMenu);
    const row2 = new ActionRowBuilder().addComponents(elementMenu);

    const embed = new EmbedBuilder()
      .setTitle("‚ú® T·∫°o Nh√¢n V·∫≠t")
      .setDescription("Ch·ªçn **T·ªôc** v√† **Ng≈© h√†nh** ƒë·ªÉ b·∫Øt ƒë·∫ßu tu luy·ªán!")
      .setColor("Purple");

    const reply = await msg.reply({
      embeds: [embed],
      components: [row1, row2],
    });

    let selectedRace = null;
    let selectedElement = null;
    const collector = reply.createMessageComponentCollector({ time: 60000 });

    collector.on("collect", async (interaction) => {
      if (interaction.user.id !== msg.author.id) {
        return interaction.reply({
          content: "‚ö†Ô∏è ƒê√¢y kh√¥ng ph·∫£i l·ª±a ch·ªçn c·ªßa b·∫°n!",
          ephemeral: true,
        });
      }

      if (interaction.customId === "select_race") {
        selectedRace = interaction.values[0];
        await interaction.reply({
          content: `üß¨ B·∫°n ƒë√£ ch·ªçn **${races[selectedRace].name}**`,
          ephemeral: true,
        });
      }

      if (interaction.customId === "select_element") {
        selectedElement = interaction.values[0];
        await interaction.reply({
          content: `üåø B·∫°n ƒë√£ ch·ªçn **${elements.display[selectedElement]}**`,
          ephemeral: true,
        });
      }

      if (selectedRace && selectedElement) {
        // t·∫°o user
        const { createUser } = require("../utils/storage");
        const newUser = createUser(
          msg.author.id,
          selectedRace,
          selectedElement
        );

        const confirm = new EmbedBuilder()
          .setTitle("‚úÖ Nh√¢n v·∫≠t ƒë√£ t·∫°o th√†nh c√¥ng!")
          .setColor("Green")
          .setDescription(
            `üß¨ **T·ªôc:** ${races[selectedRace].emoji} ${races[selectedRace].name}\n` +
              `üåø **Ng≈© h√†nh:** ${elements.display[selectedElement]}\n` +
              `‚öîÔ∏è **C·∫£nh gi·ªõi:** ${newUser.realm}\n` +
              `‚ù§Ô∏è M√°u: ${newUser.hp} | üî∑ Mana: ${newUser.mana}\n` +
              `üî• C√¥ng: ${newUser.attack} | üõ°Ô∏è Th·ªß: ${newUser.defense} | üì¶ Gi√°p: ${newUser.armor}\n` +
              `üí¢ N·ªô: ${newUser.fury} | üíé Linh Th·∫°ch: ${newUser.linhthach}`
          );

        await msg.channel.send({ embeds: [confirm] });
        collector.stop();
      }
    });

    collector.on("end", () => {
      if (!selectedRace || !selectedElement) {
        msg.channel.send(
          "‚è≥ B·∫°n ch∆∞a ho√†n t·∫•t ch·ªçn T·ªôc v√† Ng≈© h√†nh, h√£y th·ª≠ l·∫°i!"
        );
      }
    });
  },
};
