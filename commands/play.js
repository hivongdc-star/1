const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require("discord.js");
const { 
  joinVoiceChannel, 
  createAudioPlayer, 
  createAudioResource, 
  AudioPlayerStatus, 
  NoSubscriberBehavior, 
  getVoiceConnection 
} = require("@discordjs/voice");
const ytdl = require("@distube/ytdl-core");

const players = new Map();

module.exports = {
  name: "play",
  description: "Ph√°t nh·∫°c t·ª´ link YouTube üéµ",
  async run(client, message, args) {
    const url = args[0];
    if (!url) return message.reply("‚ö†Ô∏è H√£y nh·∫≠p link YouTube h·ª£p l·ªá!");
    if (!message.member.voice.channel) return message.reply("‚ùó B·∫°n c·∫ßn v√†o voice channel tr∆∞·ªõc!");

    const channel = message.member.voice.channel;

    try {
      const connection = joinVoiceChannel({
        channelId: channel.id,
        guildId: message.guild.id,
        adapterCreator: channel.guild.voiceAdapterCreator,
      });

      const stream = await ytdl(url, {
        filter: "audioonly",
        quality: "highestaudio",
        highWaterMark: 1 << 25,
        dlChunkSize: 0,
        requestOptions: { maxReconnects: 5 },
      });

      const resource = createAudioResource(stream);
      const player = createAudioPlayer({ behaviors: { noSubscriber: NoSubscriberBehavior.Pause } });
      player.play(resource);
      connection.subscribe(player);
      players.set(message.guild.id, player);

      const info = await ytdl.getInfo(url);
      const title = info.videoDetails.title;
      const duration = Math.floor(info.videoDetails.lengthSeconds / 60) + " ph√∫t " + (info.videoDetails.lengthSeconds % 60) + " gi√¢y";

      const embed = new EmbedBuilder()
        .setColor("Random")
        .setTitle(`üé∂ ƒêang ph√°t: ${title}`)
        .setURL(url)
        .setThumbnail(info.videoDetails.thumbnails[0]?.url || null)
        .setDescription(`‚è±Ô∏è Th·ªùi l∆∞·ª£ng: ${duration}`)
        .setFooter({ text: `Ng∆∞·ªùi y√™u c·∫ßu: ${message.author.username}`, iconURL: message.author.displayAvatarURL() });

      const buttons = new ActionRowBuilder().addComponents(
        new ButtonBuilder().setCustomId("pause").setLabel("‚è∏Ô∏è T·∫°m d·ª´ng").setStyle(ButtonStyle.Secondary),
        new ButtonBuilder().setCustomId("resume").setLabel("‚ñ∂Ô∏è Ti·∫øp t·ª•c").setStyle(ButtonStyle.Secondary),
        new ButtonBuilder().setCustomId("stop").setLabel("‚èπÔ∏è D·ª´ng").setStyle(ButtonStyle.Danger),
        new ButtonBuilder().setCustomId("replay").setLabel("üîÅ Ph√°t l·∫°i").setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId("leave").setLabel("üîá R·ªùi k√™nh").setStyle(ButtonStyle.Secondary)
      );

      const msg = await message.reply({ embeds: [embed], components: [buttons] });
      const collector = msg.createMessageComponentCollector({ time: 10 * 60 * 1000 });

      collector.on("collect", async (i) => {
        if (i.user.id !== message.author.id)
          return i.reply({ content: "üö´ B·∫°n kh√¥ng th·ªÉ ƒëi·ªÅu khi·ªÉn nh·∫°c c·ªßa ng∆∞·ªùi kh√°c!", ephemeral: true });

        const player = players.get(message.guild.id);
        if (!player) return i.reply({ content: "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tr√¨nh ph√°t!", ephemeral: true });

        switch (i.customId) {
          case "pause":
            player.pause();
            await i.reply({ content: "‚è∏Ô∏è ƒê√£ t·∫°m d·ª´ng!", ephemeral: true });
            break;
          case "resume":
            player.unpause();
            await i.reply({ content: "‚ñ∂Ô∏è Ti·∫øp t·ª•c ph√°t!", ephemeral: true });
            break;
          case "stop":
            player.stop();
            await i.reply({ content: "‚èπÔ∏è ƒê√£ d·ª´ng ph√°t!", ephemeral: true });
            break;
          case "replay":
            const replayStream = await ytdl(url, { filter: "audioonly", quality: "highestaudio" });
            player.play(createAudioResource(replayStream));
            await i.reply({ content: "üîÅ Ph√°t l·∫°i b√†i h√°t!", ephemeral: true });
            break;
          case "leave":
            const conn = getVoiceConnection(message.guild.id);
            conn?.destroy();
            players.delete(message.guild.id);
            await i.reply({ content: "üëã Bot ƒë√£ r·ªùi k√™nh!", ephemeral: true });
            break;
        }
      });

      player.on(AudioPlayerStatus.Idle, () => {
        const conn = getVoiceConnection(message.guild.id);
        conn?.destroy();
        players.delete(message.guild.id);
      });
    } catch (err) {
      console.error("Music Error:", err);
      message.reply("‚ùå C√≥ l·ªói x·∫£y ra khi ph√°t nh·∫°c!");
    }
  },
};
