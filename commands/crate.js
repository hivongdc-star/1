const {
  ActionRowBuilder,
  StringSelectMenuBuilder,
  EmbedBuilder,
} = require("discord.js");
const { loadUsers, saveUsers } = require("../utils/storage");

module.exports = {
  name: "crate",
  aliases: ["create"],
  run: async (client, msg) => {
    const users = loadUsers();

    // N·∫øu ƒë√£ c√≥ nh√¢n v·∫≠t r·ªìi
    if (users[msg.author.id]) {
      return msg.reply("‚ö†Ô∏è B·∫°n ƒë√£ c√≥ nh√¢n v·∫≠t r·ªìi!");
    }

    // Menu ch·ªçn T·ªôc
    const tocMenu = new StringSelectMenuBuilder()
      .setCustomId("select_toc")
      .setPlaceholder("üß¨ Ch·ªçn T·ªôc")
      .addOptions([
        { label: "Nh√¢n", value: "nhan", emoji: "üë§" },
        { label: "Ma", value: "ma", emoji: "üòà" },
        { label: "Ti√™n", value: "tien", emoji: "üëº" },
        { label: "Y√™u", value: "yeu", emoji: "ü¶ä" },
        { label: "Th·∫ßn", value: "than", emoji: "‚ö°" },
      ]);

    // Menu ch·ªçn H·ªá
    const heMenu = new StringSelectMenuBuilder()
      .setCustomId("select_he")
      .setPlaceholder("üåø Ch·ªçn H·ªá")
      .addOptions([
        { label: "Kim", value: "kim", emoji: "‚öîÔ∏è" },
        { label: "M·ªôc", value: "moc", emoji: "üåø" },
        { label: "Th·ªßy", value: "thuy", emoji: "üíß" },
        { label: "H·ªèa", value: "hoa", emoji: "üî•" },
        { label: "Th·ªï", value: "tho", emoji: "‚õ∞Ô∏è" },
      ]);

    const row1 = new ActionRowBuilder().addComponents(tocMenu);
    const row2 = new ActionRowBuilder().addComponents(heMenu);

    const embed = new EmbedBuilder()
      .setTitle("‚ú® T·∫°o Nh√¢n V·∫≠t")
      .setDescription(
        "H√£y ch·ªçn **T·ªôc** v√† **H·ªá** ƒë·ªÉ b·∫Øt ƒë·∫ßu con ƒë∆∞·ªùng tu luy·ªán c·ªßa b·∫°n!"
      )
      .setColor("Purple");

    const reply = await msg.reply({
      embeds: [embed],
      components: [row1, row2],
    });

    // Collector x·ª≠ l√Ω ch·ªçn
    const collector = reply.createMessageComponentCollector({
      time: 60000,
    });

    let selectedRace = null;
    let selectedElement = null;

    collector.on("collect", async (interaction) => {
      if (interaction.user.id !== msg.author.id) {
        return interaction.reply({
          content: "‚ö†Ô∏è ƒê√¢y kh√¥ng ph·∫£i l·ª±a ch·ªçn c·ªßa b·∫°n!",
          ephemeral: true,
        });
      }

      if (interaction.customId === "select_toc") {
        selectedRace = interaction.values[0];
        await interaction.reply({
          content: `üß¨ B·∫°n ƒë√£ ch·ªçn **${selectedRace}**`,
          ephemeral: true,
        });
      }

      if (interaction.customId === "select_he") {
        selectedElement = interaction.values[0];
        await interaction.reply({
          content: `üåø B·∫°n ƒë√£ ch·ªçn **${selectedElement}**`,
          ephemeral: true,
        });
      }

      // Khi ƒë√£ ch·ªçn ƒë·ªß c·∫£ T·ªôc + H·ªá
      if (selectedRace && selectedElement) {
        users[msg.author.id] = {
          id: msg.author.id,
          name: msg.author.username,
          toc: selectedRace,
          he: selectedElement,
          hp: 100,
          mana: 100,
          cong: 10,
          thu: 10,
          giap: 10,
          no: 0,
          linhThach: 0,
        };

        saveUsers(users);

        const confirm = new EmbedBuilder()
          .setTitle("‚úÖ Nh√¢n v·∫≠t ƒë√£ t·∫°o th√†nh c√¥ng!")
          .setColor("Green")
          .setDescription(
            `üß¨ **T·ªôc:** ${selectedRace}\n` +
              `üåø **H·ªá:** ${selectedElement}\n` +
              `‚ù§Ô∏è M√°u: 100\n` +
              `üî∑ Mana: 100\n` +
              `‚öîÔ∏è C√¥ng: 10\n` +
              `üõ°Ô∏è Th·ªß: 10\n` +
              `üí† Gi√°p: 10\n` +
              `üî• N·ªô: 0\n` +
              `üíé Linh Th·∫°ch: 0`
          );

        await msg.channel.send({ embeds: [confirm] });
        collector.stop();
      }
    });

    collector.on("end", () => {
      if (!selectedRace || !selectedElement) {
        msg.channel.send("‚è≥ B·∫°n ch∆∞a ho√†n t·∫•t ch·ªçn T·ªôc v√† H·ªá, h√£y th·ª≠ l·∫°i!");
      }
    });
  },
};
