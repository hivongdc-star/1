const {
  ActionRowBuilder,
  StringSelectMenuBuilder,
  EmbedBuilder,
} = require("discord.js");
const { loadUsers, saveUsers, createUser } = require("../utils/storage");
const races = require("../utils/races");
const elements = require("../utils/element");

module.exports = {
  name: "reset",
  aliases: ["rs"],
  run: async (client, msg) => {
    const users = loadUsers();
    if (!users[msg.author.id]) {
      return msg.reply("‚ö†Ô∏è B·∫°n ch∆∞a c√≥ nh√¢n v·∫≠t ƒë·ªÉ reset!");
    }

    // xo√° nh√¢n v·∫≠t c≈©
    delete users[msg.author.id];
    saveUsers(users);

    // menu ch·ªçn l·∫°i t·ªôc
    const raceMenu = new StringSelectMenuBuilder()
      .setCustomId("reset_select_race")
      .setPlaceholder("üß¨ Ch·ªçn l·∫°i T·ªôc")
      .addOptions(
        Object.entries(races).map(([key, r]) => ({
          label: (r.name || key).substring(0, 25),
          value: key.substring(0, 100),
          emoji: r.emoji || "‚ú®",
        }))
      );

    // menu ch·ªçn l·∫°i ng≈© h√†nh
    const elementMenu = new StringSelectMenuBuilder()
      .setCustomId("reset_select_element")
      .setPlaceholder("üåø Ch·ªçn l·∫°i Ng≈© h√†nh")
      .addOptions(
        Object.entries(elements.display).map(([key, raw]) => {
          const parts = raw.trim().split(/\s+/);
          const emoji = parts[0] || "‚ú®";
          const name = parts.slice(1).join(" ") || key;
          return {
            label: name.substring(0, 25),
            value: key.substring(0, 100),
            emoji,
          };
        })
      );

    const row1 = new ActionRowBuilder().addComponents(raceMenu);
    const row2 = new ActionRowBuilder().addComponents(elementMenu);

    const embed = new EmbedBuilder()
      .setColor("Red")
      .setTitle("‚ôªÔ∏è Reset nh√¢n v·∫≠t")
      .setDescription(
        `Nh√¢n v·∫≠t c≈© c·ªßa **${msg.author.username}** ƒë√£ b·ªã xo√°.\nüëâ H√£y ch·ªçn l·∫°i **T·ªôc** v√† **Ng≈© h√†nh** ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i!`
      );

    const reply = await msg.channel.send({
      embeds: [embed],
      components: [row1, row2],
    });

    let selectedRace = null;
    let selectedElement = null;
    const collector = reply.createMessageComponentCollector({ time: 60000 });

    collector.on("collect", async (interaction) => {
      if (interaction.user.id !== msg.author.id) {
        return interaction.reply({
          content: "‚ö†Ô∏è B·∫°n ch·ªâ c√≥ th·ªÉ reset nh√¢n v·∫≠t c·ªßa ch√≠nh m√¨nh!",
          ephemeral: true,
        });
      }

      if (interaction.customId === "reset_select_race") {
        selectedRace = interaction.values[0];
        await interaction.reply({
          content: `üß¨ B·∫°n ƒë√£ ch·ªçn l·∫°i **${races[selectedRace].name}**`,
          ephemeral: true,
        });
      }

      if (interaction.customId === "reset_select_element") {
        selectedElement = interaction.values[0];
        await interaction.reply({
          content: `üåø B·∫°n ƒë√£ ch·ªçn l·∫°i **${elements.display[selectedElement]}**`,
          ephemeral: true,
        });
      }

      if (selectedRace && selectedElement) {
        const newUser = createUser(
          msg.author.id,
          selectedRace,
          selectedElement
        );

        const confirm = new EmbedBuilder()
          .setTitle("‚úÖ Reset th√†nh c√¥ng!")
          .setColor("Green")
          .setDescription(
            `üß¨ **T·ªôc:** ${races[selectedRace].emoji} ${races[selectedRace].name}\n` +
              `üåø **Ng≈© h√†nh:** ${elements.display[selectedElement]}\n` +
              `‚öîÔ∏è **C·∫£nh gi·ªõi:** ${newUser.realm}\n` +
              `‚ù§Ô∏è M√°u: ${newUser.hp} | üî∑ Mana: ${newUser.mana}\n` +
              `üî• C√¥ng: ${newUser.attack} | üõ°Ô∏è Th·ªß: ${newUser.defense} | üì¶ Gi√°p: ${newUser.armor}\n` +
              `üí¢ N·ªô: ${newUser.fury} | üíé Linh Th·∫°ch: ${newUser.linhthach}`
          )
          .setFooter({ text: "‚ú® H√£y tu luy·ªán chƒÉm ch·ªâ t·ª´ ƒë·∫ßu!" });

        await msg.channel.send({ embeds: [confirm] });
        collector.stop();
      }
    });

    collector.on("end", () => {
      if (!selectedRace || !selectedElement) {
        msg.channel.send("‚è≥ Reset ch∆∞a ho√†n t·∫•t, h√£y d√πng l·∫°i l·ªánh `-reset`.");
      }
    });
  },
};
